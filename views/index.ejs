<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>ðŸ“š My Book Tracker</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="stylesheet" href="/styles.css">
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
</head>
<body>
  <div class="container">
    <header class="header">
      <div class="header-content">
        <h1><i class="fas fa-book-open"></i> My Book Library</h1>
        <p class="subtitle">Track your reading journey and discover new stories</p>
      </div>
      <div class="header-actions">
        <a href="/add" class="add-btn">
          <i class="fas fa-plus"></i> Add New Book
        </a>
      </div>
    </header>

    <main class="main-content">
      <% if (books.length === 0) { %>
        <div class="empty-state">
          <div class="empty-icon">
            <i class="fas fa-books"></i>
          </div>
          <h2>No books yet</h2>
          <p>Start building your personal library by adding your first book!</p>
          <a href="/add" class="empty-state-btn">
            <i class="fas fa-plus"></i> Add Your First Book
          </a>
        </div>
      <% } else { %>
        <div class="stats-bar">
          <div class="stat-item">
            <span class="stat-number"><%= books.length %></span>
            <span class="stat-label">Total Books</span>
          </div>
          <div class="stat-item">
            <span class="stat-number"><%= (books.reduce((sum, book) => sum + (book.rating || 0), 0) / books.length).toFixed(1) %></span>
            <span class="stat-label">Avg Rating</span>
          </div>
          <div class="stat-item">
            <span class="stat-number"><%= books.filter(book => book.rating >= 4).length %></span>
            <span class="stat-label">Favorites</span>
          </div>
        </div>

        <div class="books-grid">
          <% books.forEach(book => { %>
            <div class="book-card" data-isbn="<%= book.isbn %>" data-title="<%= book.title %>">
              <div class="book-cover">
                <img 
                  src="<%= book.cover_url %>" 
                  alt="<%= book.title %> Cover"
                  onerror="this.src='/default-cover.svg'"
                  class="cover-image">
                <div class="book-rating">
                  <span class="rating-stars">
                    <% for(let i = 1; i <= 5; i++) { %>
                      <i class="fas fa-star <%= i <= book.rating ? 'filled' : 'empty' %>"></i>
                    <% } %>
                  </span>
                  <span class="rating-number"><%= book.rating %>/5</span>
                </div>
              </div>
              
              <div class="book-info">
                <h3 class="book-title"><%= book.title %></h3>
                <p class="book-author">
                  <i class="fas fa-user"></i> <%= book.author || 'Unknown Author' %>
                </p>
                
                <% if (book.isbn) { %>
                  <p class="book-isbn">
                    <i class="fas fa-barcode"></i> <%= book.isbn %>
                  </p>
                <% } %>
                
                <% if (book.date_read) { %>
                  <p class="book-date">
                    <i class="fas fa-calendar"></i> 
                    <%= new Date(book.date_read).toLocaleDateString('en-US', { 
                      year: 'numeric', 
                      month: 'long', 
                      day: 'numeric' 
                    }) %>
                  </p>
                <% } %>
                
                <% if (book.notes && book.notes.trim()) { %>
                  <div class="book-notes">
                    <p class="notes-label">Notes:</p>
                    <p class="notes-text"><%= book.notes %></p>
                  </div>
                <% } %>
                
                <div class="book-actions">
                  <a href="/edit/<%= book.id %>" class="action-btn edit-btn">
                    <i class="fas fa-edit"></i> Edit
                  </a>
                  <form action="/delete/<%= book.id %>" method="post" class="delete-form" 
                        onsubmit="return confirm('Are you sure you want to delete this book?');">
                    <button type="submit" class="action-btn delete-btn">
                      <i class="fas fa-trash"></i> Delete
                    </button>
                  </form>
                </div>
              </div>
            </div>
          <% }) %>
        </div>
      <% } %>
    </main>
  </div>

  <script>
    document.addEventListener("DOMContentLoaded", () => {
      // Handle cover image errors and fetch from Open Library if needed
      document.querySelectorAll(".cover-image").forEach(async (img) => {
        img.addEventListener("error", async function() {
          const bookCard = this.closest('.book-card');
          const isbn = bookCard.dataset.isbn;
          const title = bookCard.dataset.title;
          
          if (isbn || title) {
            try {
              let apiUrl = isbn && isbn.trim() !== ""
                ? `https://openlibrary.org/search.json?isbn=${isbn}`
                : `https://openlibrary.org/search.json?title=${encodeURIComponent(title)}`;
              
              const response = await fetch(apiUrl);
              const data = await response.json();
              
              if (data.docs && data.docs.length > 0 && data.docs[0].cover_i) {
                this.src = `https://covers.openlibrary.org/b/id/${data.docs[0].cover_i}-M.jpg`;
                this.classList.remove('error');
              } else {
                this.src = '/default-cover.svg';
              }
            } catch (error) {
              console.error("Failed to fetch cover:", error);
              this.src = '/default-cover.svg';
            }
          } else {
            this.src = '/default-cover.svg';
          }
        });
      });

      // Add smooth animations
      const bookCards = document.querySelectorAll('.book-card');
      bookCards.forEach((card, index) => {
        card.style.animationDelay = `${index * 0.1}s`;
        card.classList.add('animate-in');
      });
    });
  </script>
</body>
</html>
